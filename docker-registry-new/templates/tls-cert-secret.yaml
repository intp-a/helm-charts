apiVersion: v1
kind: Secret
metadata:
  name: {{ .Release.Name }}-tls-cert
  labels:
    app: {{ .Release.Name }}
    chart: {{ .Chart.Name }}
    release: {{ .Release.Name | quote }}
type: Opaque
data:
{{- if .Values.ssl.generateTLS }}
  {{- $ca := dict "Cert" (lookup "v1" "Secret" .Release.Namespace (printf "%s-ca-cert" .Release.Namespace)."ca.Cert" "Key" (lookup "v1" "Secret" .Release.Namespace (printf "%s-ca-cert" .Release.Namespace)."ca.Key" ) }}
  {{- $cn := default (printf "%s-svc.%s.svc.cluster.local" .Release.Name .Release.Namespace) .Values.ssl.defaultCN }}
  {{- $server := genSignedCert $cn ( default nil .Values.ssl.defaultIPList ) ( default nil .Values.ssl.defaultSANList ) (int .Values.ssl.tlsLifespan) $ca }}
  tls.crt: {{ $server.Cert | b64enc }}
  tls.key: {{ $server.Key | b64enc }}
{{- else }}
  tls.crt: {{ .Values.ssl.defaultCert }}
  tls.key: {{ .Values.ssl.defaultKey }}
{{- end }}